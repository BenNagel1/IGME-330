{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://nagel-b-hw2/./src/dataFetcher.ts","webpack://nagel-b-hw2/./src/audio.ts","webpack://nagel-b-hw2/./src/canvas.ts","webpack://nagel-b-hw2/./src/main.ts","webpack://nagel-b-hw2/./src/utils.ts","webpack://nagel-b-hw2/./src/loader.ts"],"sourcesContent":["const fetchData = (url, title, tracks, bass, treble) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', url, true); // Opens a request to the given URL\r\n    \r\n    xhr.onload = () => {\r\n        if (xhr.status === 200) { // Checks if the request was successful\r\n            try {\r\n                //gets all the necessary data from the json and returns it to variables\r\n                const json = JSON.parse(xhr.responseText);\r\n                title(json.title);\r\n                tracks(json.tracks);\r\n                bass(json.filters.bass);\r\n                treble(json.filters.treble);\r\n            } catch (error) {\r\n                console.error('Error parsing JSON:', error);\r\n            }\r\n        } else {\r\n            console.error('Failed to load data');\r\n        }\r\n    };\r\n    \r\n    xhr.onerror = () => console.error('XHR request error');\r\n    xhr.send();\r\n};\r\n\r\n// TODO: Export fetchData so it can be imported in app.js\r\nexport { fetchData };","// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element, sourceNode, analyserNode, gainNode, lowBiquadFilter, highBiquadFilter;\r\n\r\n// 3 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n    gain: .5,\r\n    numSamples: 256\r\n});\r\n\r\n// 4 - create a new array of 8-bit integers (0-255)\r\n// this is a typed array to hold the audio frequency data\r\nlet audioData = new Uint8Array(DEFAULTS.numSamples / 2);\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebaudio = (filePath) => {\r\n\r\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio();\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5 - create an analyser node\r\n    // note the UK spelling of \"Analyser\"\r\n    analyserNode = audioCtx.createAnalyser();\r\n\r\n    lowBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowBiquadFilter.type = \"lowshelf\";\r\n    highBiquadFilter = audioCtx.createBiquadFilter();\r\n    highBiquadFilter.type = \"highshelf\";\r\n    \r\n    /*\r\n    // 6\r\n    We will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\n    across the sound spectrum.\r\n    \r\n    If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\n    the third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\n    the amplitude of that frequency.\r\n    */\r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    // 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(lowBiquadFilter);\r\n    lowBiquadFilter.connect(highBiquadFilter);\r\n    highBiquadFilter.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\n//loads sound file using path\r\nconst loadSoundFile = (filePath) => {\r\n    element.src = filePath;\r\n}\r\n\r\n//plays the current selected sound\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n}\r\n\r\n//pauses the current selected sound\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n}\r\n\r\n//sets the sound volume\r\nconst setVolume = (value) => {\r\n    value = Number(value);\r\n    gainNode.gain.value = value;\r\n}\r\n\r\nexport { audioCtx, setupWebaudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, analyserNode, lowBiquadFilter, highBiquadFilter};","/*\r\n    The purpose of this file is to take in the analyser node and a <canvas> element: \r\n      - the module will create a drawing context that points at the <canvas> \r\n      - it will store the reference to the analyser node\r\n      - in draw(), it will loop through the data in the analyser node\r\n      - and then draw something representative on the canvas\r\n      - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\ninterface DrawParams{\r\n    showGradient: boolean,\r\n    showBars: boolean,\r\n    showCircles: boolean,\r\n    showNoise: boolean,\r\n    showInvert: boolean,\r\n    showEmboss: boolean,\r\n    toggleLowshelf: boolean,\r\n    toggleHighshelf: boolean,\r\n    toggleWaveform: boolean\r\n}\r\n\r\nimport * as utils from './utils';\r\nimport { drawParams } from './main';\r\n\r\nlet ctx, canvasWidth, canvasHeight, gradient, analyserNode, audioData;\r\n\r\n//sprite class used for the surf boards\r\nclass EllipseSprite {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    fill: string;\r\n    stroke: string;\r\n    wave: any; // Replace 'any' with a more specific type if known\r\n\r\n    constructor(\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        fill: string,\r\n        stroke: string,\r\n        wave: any\r\n    ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.fill = fill;\r\n        this.stroke = stroke;\r\n        this.wave = wave;\r\n    }\r\n\r\n    update(waveX: number, waveY: number): void {\r\n        this.x = waveX;\r\n        this.y = waveY;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.fill;\r\n        ctx.strokeStyle = this.stroke;\r\n        ctx.lineWidth = 5;\r\n        ctx.ellipse(this.x, this.y, this.width, this.height, Math.PI / 2, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        ctx.restore();\r\n    }\r\n}\r\n\r\n\r\nlet sprites = [];\r\n\r\nconst setupCanvas = (canvasElement, analyserNodeRef) => {\r\n    // create drawing context\r\n    ctx = canvasElement.getContext(\"2d\");\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n    // create a gradient that runs top to bottom\r\n    gradient = utils.getLinearGradient(ctx, 0, 0, 0, canvasHeight, [{ percent: 0, color: \"#1F214D\" }, { percent: .5, color: \"#BF3475\" }, { percent: 1, color: \"#EE6C45\" }]);\r\n    // keep a reference to the analyser node\r\n    analyserNode = analyserNodeRef;\r\n    // this is the array where the analyser data will be stored\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n\r\n    //creates the 2 sprite instances (surf boards)\r\n    sprites[0] = new EllipseSprite(100, 100, 25, 50, \"red\", \"darkred\", 20);\r\n    sprites[1] = new EllipseSprite(100, 100, 25, 50, \"lime\", \"green\", 70);\r\n}\r\n\r\nconst draw = (params:DrawParams) => {\r\n    // 1 - populate the audioData array with the frequency data from the analyserNode\r\n    // notice these arrays are passed \"by reference\" \r\n\r\n    //toggles waveform/frequency data visualization\r\n    if (drawParams.toggleWaveform)\r\n        analyserNode.getByteTimeDomainData(audioData);\r\n    else\r\n        analyserNode.getByteFrequencyData(audioData);\r\n\r\n    // 2 - draw background\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .1;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    // 3 - draw gradient\r\n    if (params.showGradient) {\r\n        ctx.save();\r\n        ctx.fillStyle = gradient;\r\n        ctx.globalAlpha = .3;\r\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n        ctx.restore();\r\n    }\r\n\r\n    // 5 - draw circles\r\n    if (params.showCircles) {\r\n        let maxRadius = canvasHeight / 4;\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n\r\n        //creates a pulsing sun based on the audio\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            \r\n            let percent = audioData[i] / 255;\r\n            let circleRadius = percent * maxRadius;\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(200, 200, 0, .34 - percent / 3.0);\r\n            ctx.arc(canvasWidth / 2, canvasHeight / 3, circleRadius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(200, 150, 0, .10 - percent / 10.0);\r\n            ctx.arc(canvasWidth / 2, canvasHeight / 3, circleRadius * 1.5, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            ctx.beginPath();\r\n            ctx.fillStyle = utils.makeColor(200, 250, 0, .5 - percent / 5.0);\r\n            ctx.arc(canvasWidth / 2, canvasHeight / 3, circleRadius * .50, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    // 4 - draw bars\r\n    if (params.showBars) {\r\n        let barSpacing = 4;\r\n        let margin = 5;\r\n        let screenWidthForBars = canvasWidth - (audioData.length * barSpacing) - margin * 2;\r\n        let barWidth = screenWidthForBars / audioData.length * 2;\r\n        let barHeight = 350;\r\n        let topSpacing = 150;\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = `rgba(22, 105, 138, 0.5)`;\r\n        ctx.lineWidth = 4;\r\n        //loop through the data and draw\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            //gradient for the water color\r\n            ctx.fillStyle = `rgba(80, ${200 - i * 2}, 255, .8)`;\r\n\r\n            ctx.fillRect(i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\r\n            ctx.strokeRect(i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\r\n\r\n            //changes the x and y of the surf boards based on the wave they are on\r\n            for (let sprite of sprites) {\r\n                if (i == sprite.wave) {\r\n                    sprite.update(i * (barWidth + barSpacing), topSpacing + 256 - audioData[i]);\r\n                }\r\n            }\r\n        }\r\n        ctx.restore();\r\n\r\n        //draws the boards only if the wave they are on is visible\r\n        for (let sprite of sprites) {\r\n            if (sprite.y < 400)\r\n                sprite.draw(ctx);\r\n        }\r\n\r\n        //draw beach (part of bars because it looks best with them on too)\r\n        \r\n        //gets average wave size\r\n        let average = 0;\r\n        for(let data of audioData){\r\n            average += data;\r\n        }\r\n        average /= audioData.length;\r\n\r\n        ctx.save();\r\n        ctx.fillStyle = \"#e1bf92\";\r\n        ctx.strokeStyle = \"#b08d5f\";\r\n        ctx.lineWidth = 5;\r\n\r\n        //only draws the beach if there are waves on the screen too\r\n        if (average > 50)\r\n            ctx.globalAlpha = 1;\r\n        else\r\n            ctx.globalAlpha = average / 50;\r\n        ctx.beginPath();\r\n        ctx.moveTo(-50, 375);\r\n        ctx.bezierCurveTo(-50, 367, 100, 343, 190, 342);\r\n        ctx.bezierCurveTo(250, 341, 400, 374, 500, 374);\r\n        ctx.bezierCurveTo(730, 351, 750, 340, 850, 375);\r\n        ctx.lineTo(850, 475);\r\n        ctx.lineTo(-50, 475);\r\n        ctx.closePath();\r\n\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    // 6 - bitmap manipulation\r\n    // TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \r\n    // regardless of whether or not we are applying a pixel effect\r\n    // At some point, refactor this code so that we are looping though the image data only if\r\n    // it is necessary\r\n\r\n    // A) grab all of the pixels on the canvas and put them in the `data` array\r\n    // `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n    // the variable `data` below is a reference to that array \r\n    let imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    let data = imageData.data;\r\n    let length = data.length;\r\n    let width = imageData.width; //not using here\r\n\r\n    // B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n    for (let i = 0; i < length; i += 4) {\r\n        // C) randomly change every 20th pixel to red\r\n        if (params.showNoise && Math.random() < .05) {\r\n            // data[i] is the red channel\r\n            // data[i+1] is the green channel\r\n            // data[i+2] is the blue channel\r\n            // data[i+3] is the alpha channel\r\n            data[i] = data[i + 1] = data[i + 2] = 0; // zero out the red and green and blue channels\r\n            data[i] = 255; // make the red channel 100% red\r\n            data[i + 1] = 255; // make the green channel 100% green\r\n            data[i + 2] = 255; // make the blue channel 100% blue\r\n        } // end if\r\n        if (params.showInvert) {\r\n            let red = data[i], green = data[i + 1], blue = data[i + 2];\r\n            data[i] = 255 - red; // set red\r\n            data[i + 1] = 255 - green; // set green\r\n            data[i + 2] = 255 - blue; // set blue\r\n        }\r\n    } // end for\r\n\r\n    //note we are stepping through *each* sub-pixel\r\n    if (params.showEmboss) {\r\n        for (let i = 0; i < length; i++) {\r\n            if (i % 4 == 3) continue; //skip alpha\r\n            data[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\r\n        }\r\n    }\r\n\r\n    // D) copy image data back to canvas\r\n    ctx.putImageData(imageData, 0, 0);\r\n    //console.log(params.showInvert);\r\n}\r\n\r\nexport { setupCanvas, draw };","/*\r\n    main.js is primarily responsible for hooking up the UI to the rest of the application \r\n    and setting up the main event loop\r\n*/\r\n\r\n//imports\r\nimport { fetchData } from \"./dataFetcher\";\r\nimport * as audio from './audio';\r\nimport * as utils from './utils';\r\nimport * as canvas from './canvas';\r\n\r\n//parameters from the checkboxes\r\nconst drawParams = {\r\n    showGradient: true,\r\n    showBars: true,\r\n    showCircles: true,\r\n    showNoise: false,\r\n    showInvert: false,\r\n    showEmboss: false,\r\n    toggleLowshelf: false,\r\n    toggleHighshelf: false,\r\n    toggleWaveform: false\r\n};\r\n\r\n//used to store the data from the json file\r\nlet title;\r\nlet tracks;\r\nlet bassValue;\r\nlet trebleValue;\r\n\r\nconst init = () => {\r\n\r\n    //fetches, stores, and uses the data from the json file\r\n    fetchData('./data/av-data.json',\r\n        (titleData) => {\r\n            title = titleData\r\n            document.title = title;\r\n            document.querySelector(\"#title\").innerHTML = title;\r\n        },\r\n        (trackData: Record<string, { trackName: string }>) => {\r\n            const tracks = trackData;\r\n            const trackNames = Object.values(tracks).map(track => track.trackName);\r\n            const dataList = document.querySelector('#data-list');\r\n            if (dataList) {\r\n                dataList.innerHTML = `<ul>${trackNames.map(w => `<li>${w}</li>`).join(\"\")}</ul>`;\r\n            }\r\n        },\r\n        (bassData) => {\r\n            bassValue = bassData\r\n        },\r\n        (trebleData) => {\r\n            trebleValue = trebleData\r\n        });\r\n\r\n    audio.setupWebaudio(DEFAULTS.sound1);\r\n    let canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n    setupUI(canvasElement);\r\n    canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n\r\n    loop();\r\n}\r\n\r\n// 1 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n    sound1: \"./media/New Adventure Theme.mp3\"\r\n});\r\n\r\nconst setupUI = (canvasElement) => {\r\n    // A - hookup fullscreen button\r\n    const fsButton = document.querySelector(\"#btn-fullscreen\") as HTMLButtonElement;\r\n\r\n    // add .onclick event to button\r\n    fsButton.onclick = e => {\r\n        //console.log(\"goFullscreen() called\");\r\n        utils.goFullscreen(canvasElement);\r\n    };\r\n\r\n    // add .onclick event to button\r\n    const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement | null;\r\n\r\n    if (playButton) {\r\n        playButton.onclick = (e: MouseEvent) => {\r\n            const target = e.currentTarget as HTMLButtonElement;\r\n\r\n            // Check if context is suspended (autoplay policy)\r\n            if (audio.audioCtx.state === \"suspended\") {\r\n                audio.audioCtx.resume();\r\n            }\r\n\r\n            if (target.dataset.playing === \"no\") {\r\n                // If track is currently paused, play it\r\n                audio.playCurrentSound();\r\n                target.dataset.playing = \"yes\"; // our CSS will set the text to \"Pause\"\r\n            } else {\r\n                // If track is currently playing, pause it\r\n                audio.pauseCurrentSound();\r\n                target.dataset.playing = \"no\"; // our CSS will set the text to \"Play\"\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    //C - hookup volume slider and label\r\n    let volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n    let volumeLabel = document.querySelector(\"#label-volume\");\r\n\r\n    // add .oninput event to slider\r\n    volumeSlider.oninput = e => {\r\n        const target = e.target as HTMLInputElement;\r\n        //set the gain\r\n        audio.setVolume(target.value);\r\n        //update value of label to match initial value of slider\r\n        volumeLabel.innerHTML = Math.round((Number(target.value) / 2) * 100).toString();\r\n    }\r\n\r\n    //set value of label to match initial value of slider\r\n    volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    //D - hookup track <select>\r\n    let trackSelect = document.querySelector(\"#select-track\") as HTMLSelectElement;\r\n    // add .onchange event to <select>\r\n    trackSelect.onchange = e => {\r\n        const target = e.target as HTMLSelectElement;\r\n        audio.loadSoundFile(target.value);\r\n        //pause the current track if it is playing\r\n        if (playButton.dataset.playing == \"yes\") {\r\n            playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n        }\r\n    }\r\n\r\n    //sets checked state to state of drawParams\r\n    // Set checked states\r\n    (document.querySelector(\"#cb-gradient\") as HTMLInputElement).checked = drawParams.showGradient;\r\n    (document.querySelector(\"#cb-bars\") as HTMLInputElement).checked = drawParams.showBars;\r\n    (document.querySelector(\"#cb-circles\") as HTMLInputElement).checked = drawParams.showCircles;\r\n    (document.querySelector(\"#cb-noise\") as HTMLInputElement).checked = drawParams.showNoise;\r\n    (document.querySelector(\"#cb-invert\") as HTMLInputElement).checked = drawParams.showInvert;\r\n    (document.querySelector(\"#cb-emboss\") as HTMLInputElement).checked = drawParams.showEmboss;\r\n    (document.querySelector(\"#cb-lowshelf\") as HTMLInputElement).checked = drawParams.toggleLowshelf;\r\n    (document.querySelector(\"#cb-highshelf\") as HTMLInputElement).checked = drawParams.toggleHighshelf;\r\n    (document.querySelector(\"#cb-waveform\") as HTMLInputElement).checked = drawParams.toggleWaveform;\r\n\r\n    // Event handlers\r\n    (document.querySelector(\"#cb-gradient\") as HTMLInputElement).addEventListener(\"change\", e => {\r\n        drawParams.showGradient = (e.target as HTMLInputElement).checked;\r\n    });\r\n    (document.querySelector(\"#cb-bars\") as HTMLInputElement).addEventListener(\"change\", e => {\r\n        drawParams.showBars = (e.target as HTMLInputElement).checked;\r\n    });\r\n    (document.querySelector(\"#cb-circles\") as HTMLInputElement).addEventListener(\"change\", e => {\r\n        drawParams.showCircles = (e.target as HTMLInputElement).checked;\r\n    });\r\n    (document.querySelector(\"#cb-noise\") as HTMLInputElement).addEventListener(\"change\", e => {\r\n        drawParams.showNoise = (e.target as HTMLInputElement).checked;\r\n    });\r\n    (document.querySelector(\"#cb-invert\") as HTMLInputElement).addEventListener(\"change\", e => {\r\n        drawParams.showInvert = (e.target as HTMLInputElement).checked;\r\n    });\r\n    (document.querySelector(\"#cb-emboss\") as HTMLInputElement).addEventListener(\"change\", e => {\r\n        drawParams.showEmboss = (e.target as HTMLInputElement).checked;\r\n    });\r\n    (document.querySelector(\"#cb-lowshelf\") as HTMLInputElement).addEventListener(\"change\", e => {\r\n        drawParams.toggleLowshelf = (e.target as HTMLInputElement).checked;\r\n        toggleLowshelf();\r\n    });\r\n    (document.querySelector(\"#cb-highshelf\") as HTMLInputElement).addEventListener(\"change\", e => {\r\n        drawParams.toggleHighshelf = (e.target as HTMLInputElement).checked;\r\n        toggleHighshelf();\r\n    });\r\n    (document.querySelector(\"#cb-waveform\") as HTMLInputElement).addEventListener(\"change\", e => {\r\n        drawParams.toggleWaveform = (e.target as HTMLInputElement).checked;\r\n    });\r\n\r\n    } // end setupUI\r\n\r\n\r\n//turns on/off the bass filter\r\nconst toggleLowshelf = () => {\r\n\r\n        if (drawParams.toggleLowshelf) {\r\n            audio.lowBiquadFilter.frequency.setValueAtTime(1000, audio.audioCtx.currentTime);\r\n            audio.lowBiquadFilter.gain.setValueAtTime(bassValue, audio.audioCtx.currentTime);\r\n        } else {\r\n            audio.lowBiquadFilter.gain.setValueAtTime(0, audio.audioCtx.currentTime);\r\n        }\r\n    }\r\n\r\n    //turns on/off the treble filter\r\n    const toggleHighshelf = () => {\r\n\r\n        if (drawParams.toggleHighshelf) {\r\n            audio.highBiquadFilter.frequency.setValueAtTime(1000, audio.audioCtx.currentTime);\r\n            audio.highBiquadFilter.gain.setValueAtTime(trebleValue, audio.audioCtx.currentTime);\r\n        } else {\r\n            audio.highBiquadFilter.gain.setValueAtTime(0, audio.audioCtx.currentTime);\r\n        }\r\n    }\r\n\r\n    //loops the draw method at 60fps\r\n    const loop = () => {\r\n        setTimeout(loop, 1000 / 60);\r\n        canvas.draw(drawParams);\r\n    }\r\n\r\n    export { init, drawParams };","const makeColor = (red, green, blue, alpha = 1) => {\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min, max) => {\r\n    return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst getRandomColor = () => {\r\n    const floor = 35; // so that colors are not too bright or too dark \r\n    const getByte = () => getRandom(floor, 255 - floor);\r\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\nconst getLinearGradient = (ctx, startX, startY, endX, endY, colorStops) => {\r\n    let lg = ctx.createLinearGradient(startX, startY, endX, endY);\r\n    for (let stop of colorStops) {\r\n        lg.addColorStop(stop.percent, stop.color);\r\n    }\r\n    return lg;\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element) => {\r\n    if (element.requestFullscreen) {\r\n        element.requestFullscreen();\r\n    } else if (element.mozRequestFullscreen) {\r\n        element.mozRequestFullscreen();\r\n    } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n        element.mozRequestFullScreen();\r\n    } else if (element.webkitRequestFullscreen) {\r\n        element.webkitRequestFullscreen();\r\n    }\r\n    // .. and do nothing if the method is not supported\r\n};\r\n\r\nexport { makeColor, getRandomColor, getLinearGradient, goFullscreen };","import * as main from \"./main\";\r\n//import * as about from \"./about\";\r\n\r\nwindow.onload = () => {\r\n    //console.log(\"window.onload called\");\r\n    // 1 - do preload here - load fonts, images, additional sounds, etc...\r\n    // 2 - start up app\r\n    main.init();\r\n}"],"names":["audioCtx","sourceNode","analyserNode","gainNode","lowBiquadFilter","highBiquadFilter","ctx","canvasWidth","canvasHeight","gradient","title","bassValue","trebleValue","DEFAULTS","Object","freeze","gain","numSamples","loadSoundFile","Uint8Array","filePath","src","makeColor","red","green","blue","alpha","x","y","width","height","fill","stroke","wave","this","update","waveX","waveY","draw","save","beginPath","fillStyle","strokeStyle","lineWidth","ellipse","Math","PI","closePath","restore","sprites","drawParams","showGradient","showBars","showCircles","showNoise","showInvert","showEmboss","toggleLowshelf","toggleHighshelf","toggleWaveform","init","AudioContext","url","xhr","XMLHttpRequest","open","onload","status","json","JSON","parse","responseText","trackData","tracks","trackNames","values","map","track","trackName","dataList","document","querySelector","innerHTML","w","join","bassData","filters","bass","trebleData","treble","error","console","onerror","send","fetchData","titleData","sound1","window","Audio","createMediaElementSource","createAnalyser","createBiquadFilter","type","fftSize","createGain","value","connect","destination","canvasElement","setupUI","analyserNodeRef","getContext","startX","startY","endX","endY","lg","createLinearGradient","percent","color","addColorStop","EllipseSprite","loop","onclick","e","element","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","playButton","target","currentTarget","state","resume","dataset","playing","play","pause","volumeSlider","volumeLabel","oninput","Number","round","toString","dispatchEvent","Event","onchange","MouseEvent","checked","addEventListener","frequency","setValueAtTime","currentTime","setTimeout","params","getByteTimeDomainData","getByteFrequencyData","globalAlpha","fillRect","maxRadius","i","length","circleRadius","arc","barWidth","margin","topSpacing","strokeRect","sprite","average","moveTo","bezierCurveTo","lineTo","imageData","getImageData","data","random","putImageData"],"sourceRoot":""}